#!/usr/bin/env bash

# Set Colors
PACKAGE=dockerwifi
VERSION=0.1

MAGENTA='\e[0;35m'
RED='\e[0;31m'
GREEN='\e[0;32m'
BLUE='\e[0;34m'
NC='\e[0m'

ARCH=$(uname -m)
DOCKER_IMAGE=dockerwifi
DOCKER_BUILDFILE=build/Dockerfile
SSID=dockerwifi # default
PASSPHRASE=password123
CHANNEL=1 # default
AP_ADDR=192.168.254.1
SUBNET=192.168.254.0
clear

cat <<EOF

#####   ####   ####  #    # ###### #####  #    # # ###### # 
#    # #    # #    # #   #  #      #    # #    # # #      # 
#    # #    # #      ####   #####  #    # #    # # #####  # 
#    # #    # #      #  #   #      #####  # ## # # #      # 
#    # #    # #    # #   #  #      #   #  ##  ## # #      # 
#####   ####   ####  #    # ###### #    # #    # # #      # 

EOF


# Check for problematic services
# Borrowed and modified from #aircrack
function checkservices() {
  systemctl stop network-manager
}

if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}[ERROR]${NC} DockerWIFI requires root. Exiting..."
  exit
fi

# get interface
while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo "$PACKAGE - dockerized AP"
      echo " "
      echo "$PACKAGE [arguments]"
      echo " "
      echo "Argumentss:"
      echo "-h, --help          show brief help"
      echo "-i, --interface     specify an interface (required)"
      echo "-c, --channel       channel number"
      echo "--passphrase        passphrase for WPA-PSK APs"
      echo "--ssid              specify an SSID"
      echo "--version           print version"
      exit 0
      ;;
    -i|--interface)
      shift
      if test $# -gt 0; then
        export IFACE=$1
      else
        echo "Interface required. Exiting..."
        exit 1
      fi
      shift
      ;;
    -c|--channel)
      shift
      if test $# -gt 0; then
        export CHANNEL=$1
      else
        echo "Channel number required. Exiting..."
        exit 1
      fi
      shift
      ;;
    --ssid)
      shift
      if test $# -gt 0; then
        export SSID=$1
      else
        echo "SSID argument used but no same was provided. Exiting..."
        exit 1
      fi
      shift
      ;;
    --passphrase)
      shift
      if test $# -gt 0; then
        export PASSPHRASE=$1
      else
        echo "Passphrase argument was used but no passphrase was provided. Exiting..."
        exit 1
      fi
      shift
      ;;
    --accept)
      export ACCEPT=1
      shift
      ;;
    --version)
      echo $VERSION
      exit 0
      ;;
    *)
      break
      ;;
  esac
done

if [ -z "${IFACE}" ]; then
  echo -e "${RED}[ERROR]${NC} No interface specified. Exiting..."
  exit 1
fi

PHY=$(cat /sys/class/net/$IFACE/phy80211/name)

# Check that docker is installed and running
$(docker info > /dev/null 2>&1)
if [[ $? -ne 0 ]]; then
  echo -e ${RED}[ERROR]${NC} Docker daemon not found. Exiting...
  exit 1
fi

echo -e "[+] Checking Docker Service:\t\t${GREEN}Success${NC}"

if ! [ -e /sys/class/net/$IFACE ]; then
  echo -e "${RED}[ERROR]${NC} The specified interface does not exist. Exiting..."
  exit 1
fi

$(iw phy $PHY info | grep -qE "\* AP\s*$")
if [[ $? -eq 1 ]]; then
  echo -e "${RED}[ERROR]${NC} $IFACE does not support AP mode. Exiting..."
  exit 1
fi

echo -e "[+] Checking support for AP Mode:\t${GREEN}Success${NC}"
CHANNELS=$(iw phy $PHY info | sed -n '/Frequencies/,/^\s*Supported commands:\s*$/{//!p}' | grep -vE "disabled|IR" | grep -oP '\[\K[^]]+' | awk 'BEGIN {ORS=" "} {print}')
echo -e "[+] Supported Channels: ${GREEN}$CHANNELS${NC}"

# Get current status of card
MODE=$(iw dev | grep -A5 $IFACE | grep type | cut -d" " -f2)
if [[ $MODE == "monitor" ]]; then
  echo -e "${BLUE}[INFO]${NC} Radio mode: ${RED}Monitor${NC}"
  echo -e "${MAGENTA}[!]${NC} Radio will be set tp ${GREEN}AP${NC}"
elif [[ $MODE == "managed" ]]; then
  echo -e "${BLUE}[INFO]${NC} Radio mode: ${RED}Managed${NC}"
  echo -e "${MAGENTA}[!]${NC} Radio will be set to ${GREEN}AP${NC}"
elif [[ $MODE == "AP" ]]; then
  echo -e "[+] Radio mode: ${GREEN}AP${NC}"
else
  echo -e "${RED}[ERROR]${NC} Unknown Radio state: ${RED}$MODE${NC}. Exiting..."
  exit 1
fi

# Check for route conflict 
if [[ $(ip r | grep default | cut -d " " -f5) == "$IFACE" ]]; then
  echo -e "${BLUE}[INFO]]${NC} $IFACE configured as your default route."
fi

echo -e "[+] Bringing down network management services..."
checkservices

echo -e "[+] Building the docker image ${GREEN}$DOCKER_IMAGE${NC}..."
docker build -q --rm -t $DOCKER_IMAGE -f $DOCKER_BUILDFILE . > /dev/null
if [[ $? -ne 0 ]]; then
  echo -e "${RED}[ERROR]${NC} Error building ${RED}$DOCKER_IMAGE${NC}. Exiting..."
  exit 1
fi
echo -e "[+] Successfully built docker image: ${GREEN}$DOCKER_IMAGE${NC}"


DOCKER_NAME="dockerwifi_$IFACE"
echo -e "${MAGENTA}[!] Executing container: ${DOCKER_NAME}...${NC}"
docker run -it --rm --name $DOCKER_NAME -e "TERM=xterm-256color" -e SSID=${SSID} -e PASSPHRASE=${PASSPHRASE} -e CHANNEL=${CHANNEL} -e AP_ADDR=${AP_ADDR} -e IFACE=${IFACE} -e SUBNET=${SUBNET} --net host --privileged $DOCKER_IMAGE
echo -e "[+] Bringing up network managment services..."
systemctl restart network-manager
